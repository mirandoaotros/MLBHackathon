%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\cristian\Dropbox\Code\Matlab\mlbh\2015MLBPitcherlist.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/01/02 00:23:41
clc
clear
%% Initialize variables.
filename = 'C:\Users\cristian\Dropbox\Code\Matlab\mlbh\2015MLBPitcherlist.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: text (%s)
%   column3: double (%f)
%	column4: double (%f)
%   column5: text (%s)
%	column6: double (%f)
%   column7: text (%s)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%s%f%f%s%f%s%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
% rk = dataArray{:, 1};
% name = dataArray{:, 2};
% pitcherID = dataArray{:, 3};
% age = dataArray{:, 4};
% tm = dataArray{:, 5};
% ip = dataArray{:, 6};
% pitches = dataArray{:, 7};
% g = dataArray{:, 8};
% gs = dataArray{:, 9};
% war = dataArray{:, 10};
fip = dataArray{:, 11};
chi2 = dataArray{:, 12};
% pval = dataArray{:, 13};
chi2adj = dataArray{:, 14};
% pvaladj = dataArray{:, 15};
ftu = dataArray{:, 16};
% pvalMaurer = dataArray{:, 17};
adjFtu = dataArray{:, 18};
adjFtu(20,1) = 0.0006;

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans i;

%%
x=[log(adjFtu) ones(size(fip,1),1)];
y=fip;
B=(x'*x)\x'*y;                              %estimador ols
u=y-x*B;                                    %calculo de los residuos
s2=u'*u/(size(fip,1)-size(x,2));            %estimador s2
varB=s2*inv(x'*x);                          %matriz varianzas covarianzas

ds=sqrt(varB);                              %desviacion estandar de betas
tTB=(B(2,1))/ds(2,2);                       %estadistico t
PtTB=2*(1-cdf('t',abs(tTB),(size(fip,1)-size(x,2))));    %p value del test

u2=u.^2;                                    %errores al cuadrado
om=diag(u2);                                %matriz diagonal de e2
ew=inv(x'*x)*x'*om*x*inv(x'*x);             %matriz de varianzas y covarianzas de Eicker-White

dsew=sqrt(diag(ew));                        %desviacion estandar de los betas (E-W)
tTBew=(B(1,1))/dsew(1,1);                   %estadistico t
PtTBew=2*(1-cdf('t',abs(tTBew),(size(fip,1)-size(x,2))));    %p value del test

tss=sum((y-mean(y)).^2);                    %calculo de TSS
ssr=u'*u;                                   %calculo de SSR
r2=1-(ssr/tss);                             %calculo r^2

finalp=[PtTBew;r2];
Final=[B dsew finalp];
