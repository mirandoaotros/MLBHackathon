%% 
clear
clc

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\cristian\Dropbox\Code\Matlab\mlbh\ALPitchers\2015\279824.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/12/29 07:41:12

%% Initialize variables.
filename = 'C:\Users\cristian\Dropbox\Code\Matlab\mlbh\NLPitchers\2015\518516.csv';
delimiter = ',';

%% Format string for each line of text:
%   column33: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
ppitchType = dataArray{:, 1};

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;
%% Adjust dataset
out = find(~cellfun('isempty',strfind(ppitchType,'PO')));
todrop = out;
out = find(~cellfun('isempty',strfind(ppitchType,'IN')));
todrop = [todrop;out];
out = find(~cellfun('isempty',strfind(ppitchType,'AB')));
todrop = [todrop;out];
out = find(~cellfun('isempty',strfind(ppitchType,'AS')));
todrop = [todrop;out];
out = find(~cellfun('isempty',strfind(ppitchType,'UN')));
todrop = [todrop;out];
todrop = sort(todrop);
todrop = [todrop;0]; 
ppitchTypeF = cell(size(ppitchType,1)-size(todrop,1)+1,1);

j=1;
for i=1:size(ppitchType,1);
    if i == todrop(j,1);
        j=j+1;
    else
        ppitchTypeF(i-j+1,:) = ppitchType(i,:);
    end
end 

%% Clear temporary variables
clearvars i j out todrop ppitchType px pz szb szt

%% Fastball or BreakingBall
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FA')));
fastballlist = out;
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FT')));
fastballlist = [fastballlist;out];
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FF')));
fastballlist = [fastballlist;out];
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FC')));
fastballlist = [fastballlist;out];
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FS')));
fastballlist = [fastballlist;out];
fastballlist = sort(fastballlist);
fastballlist = [fastballlist;0];
ppitchTypeFBoBB = NaN(size(ppitchTypeF,1),1);
j=1;
for i=1:size(ppitchTypeFBoBB,1);
    if i == fastballlist(j,1);
        j=j+1;
        ppitchTypeFBoBB(i,1) = 1;
    else
        ppitchTypeFBoBB(i,1) = 0;
    end
end 

%% Clear temporary variables
clearvars i j out fastballlist ppitchTypeF

%% Set up varibles
serie=ppitchTypeFBoBB;
l=3;
v=2^l;
q=10*2^l;
k=floor(size(serie,1)/l)-q;

%% Get Permutations
x='01';                   %// Set of possible letters
K=l;                      %// Length of each permutation

C=cell(K, 1);             %// Preallocate a cell array
tab=cell(2^l,2);
tab(:,2)=num2cell(0);
[C{:}]=ndgrid(x);         %// Create K grids of values
y=cellfun(@(x){x(:)}, C); %// Convert grids to column vectors
y=[y{:}];                 %// Obtain all permutations
tab(:,1)=cellstr(y);

clear i x K C y

%% Partition q segments
blockp=NaN((q+k),l);
for i=1:(q+k)
    blockp(i,:)=serie(1:l,1);
    serie=serie(l+1:end);
end

block=cell(q+k,1);
for i=1:q+k
    blockpp=num2str(blockp(i,:));
    blockpp=blockpp(~isspace(blockpp));
    block(i,1)={blockpp};
end

clear serie blockp blockpp

%% Build the reference table
for i=1:size(tab,1)
    for j=q:-1:1
        strcmp(tab(i,1),block(j,1));
        if ans == 1
            index=j;
            index=num2cell(index);
            tab(i,2)=index;
            break
        end
    end
end

clear index i j ans

%% test
a=0;
for i=q+1:q+k
    for j=1:size(tab,1)
        strcmp(tab(j,1),block(i,1));
        if ans == 1
            index=cell2mat(tab(j,2));
            step=log2(i-index);
            a=a+step;
            index=i;
            index=num2cell(index);
            tab(j,2)=index;
            break
        end
    end
end
Ftu=a/k;

clear a i j ans index step
%%
y=1.96;
meantable=2.4016068;
vartable=1.901;
c=0.7-(0.8/l)+((((4+(32/l))*k)^(-(3/l)))/15);
s=c*vartable;
t1=meantable-y*s;
t2=meantable+y*s;
Pval=normcdf(Ftu,meantable,s);
clear y meantable vartable c s
exp=[Ftu Pval];