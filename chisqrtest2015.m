clear
clc

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\cristian\Dropbox\Code\Matlab\mlbh\NLPitchers\2015\518516.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/12/27 19:59:51

%% Initialize variables.
filename = 'C:\Users\cristian\Dropbox\Code\Matlab\mlbh\NLPitchers\2015\518516.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column33: text (%s)
%	column37: double (%f)
%   column38: double (%f)
%	column39: double (%f)
%   column40: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%s%*s%*s%*s%f%f%f%f%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
ppitchType = dataArray{:, 1};
px = dataArray{:, 2};
pz = dataArray{:, 3};
szt = dataArray{:, 4};
szb = dataArray{:, 5};

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Set previous years (2013-2014) expectations
fbexp = 0.54479484;                                                         %set fastball expectancy
bbexp = 1-fbexp;                                                            %set off-speed expectancy
sexp = 0.686596151;                                                         %set strikes expectancy
bexp = 1-sexp;                                                              %set balls expectancy
%% Adjust dataset
out = find(~cellfun('isempty',strfind(ppitchType,'PO')));                   %find the index of PO entries
todrop = out;                                                               %store the index
out = find(~cellfun('isempty',strfind(ppitchType,'IN')));                   %find the index of IN entries
todrop = [todrop;out];                                                      %store the index
out = find(~cellfun('isempty',strfind(ppitchType,'AB')));                   %find the index of AB entries
todrop = [todrop;out];                                                      %store the index
out = find(~cellfun('isempty',strfind(ppitchType,'AS')));                   %find the index of AS entries
todrop = [todrop;out];                                                      %store the index
out = find(~cellfun('isempty',strfind(ppitchType,'UN')));                   %find the index of UN entries
todrop = [todrop;out];                                                      %store the index
todrop = sort(todrop);                                                      %sort the stored index
todrop = [todrop;0];                                                        %variable adjustment for the next loop
ppitchTypeF = cell(size(ppitchType,1)-size(todrop,1)+1,1);                  %preallocate variable
pxF=NaN(size(ppitchTypeF,1),1);                                             %preallocate variable
pzF=NaN(size(ppitchTypeF,1),1);                                             %preallocate variable
szbF=NaN(size(ppitchTypeF,1),1);                                            %preallocate variable
sztF=NaN(size(ppitchTypeF,1),1);                                            %preallocate variable

j=1;                                                                        %set counter at 1
for i=1:size(ppitchType,1);                                                 %identifies entries to drop and drops them.
    if i == todrop(j,1);                                                    
        j=j+1;                                                              
    else
        ppitchTypeF(i-j+1,:) = ppitchType(i,:);                             
        pxF(i-j+1,:) = px(i,:);                                             
        pzF(i-j+1,:) = pz(i,:);                                             
        szbF(i-j+1,:) = szb(i,:);                                           
        sztF(i-j+1,:) = szt(i,:);                                           
    end
end 

%% Clear temporary variables
clearvars i j out todrop ppitchType px pz szb szt

%% Fastball or BreakingBall
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FA')));                  %find the index of FA entries
fastballlist = out;                                                         %store the index
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FT')));                  %find the index of FT entries
fastballlist = [fastballlist;out];                                          %store the index
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FF')));                  %find the index of FF entries
fastballlist = [fastballlist;out];                                          %store the index
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FC')));                  %find the index of FC entries
fastballlist = [fastballlist;out];                                          %store the index
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FS')));                  %find the index of FS entries
fastballlist = [fastballlist;out];                                          %store the index
fastballlist = sort(fastballlist);                                          %sort the stored index
fastballlist = [fastballlist;0];                                            %variable adjustment for the next loop
ppitchTypeFBoBB = NaN(size(ppitchTypeF,1),1);                               %preallocate variable
j=1;                                                                        %set counter at 1
for i=1:size(ppitchTypeFBoBB,1);                                            %identifies fastballs as 1 and offspeed as 0
    if i == fastballlist(j,1);                                              
        j=j+1;
        ppitchTypeFBoBB(i,1) = 1;
    else
        ppitchTypeFBoBB(i,1) = 0;
    end
end 

%% Clear temporary variables
clearvars i j out fastballlist ppitchTypeF

%% Strike or Ball
sobF=NaN(size(pxF,1),1);                                                    %preallocate variable
for i=1:size(sobF,1);                                                       %identifies strikes as 1 and balls as 0
    if pzF(i,1) > szbF(i,1)-eps && pzF(i,1) < sztF(i,1)+eps;                
        sobF(i,1)=1;
    else
        sobF(i,1)=0;
    end
end

%% Chi squared statistic
obs=[size(ppitchTypeFBoBB,1)-sum(ppitchTypeFBoBB); sum(ppitchTypeFBoBB)];   %computes observations frequency
exp=[size(ppitchTypeFBoBB,1)*bbexp; size(ppitchTypeFBoBB,1)*fbexp];         %computes expected frequencies
x2 = sum((obs-exp).^2 ./ exp);                                              %computes chi^2 statistic

Pval=1-chi2cdf(x2,1);                                                       %computes p-value
Final=[x2 Pval];                                                            %stores final results

%% Expanded Chi squared statistic
 
a=0;                                                                        %preallocate variable
b=0;                                                                        %preallocate variable
c=0;                                                                        %preallocate variable
d=0;                                                                        %preallocate variable
for i=1:size(sobF,1);                                                       %classifies observations
    if ppitchTypeFBoBB(i,1) == 1 && sobF(i,1) == 1                          
        a=a+1;
    elseif ppitchTypeFBoBB(i,1) == 1 && sobF(i,1) == 0
        b=b+1;
    elseif ppitchTypeFBoBB(i,1) == 0 && sobF(i,1) == 1
        c=c+1;
    else
        d=d+1;
    end
end

obs=[a;b;c;d];                                                              %computes observations frequency
exp=size(sobF,1)*[fbexp*sexp;fbexp*bexp;bbexp*sexp;bbexp*bexp];             %computes expected frequencies
x2 = sum((obs-exp).^2 ./ exp);                                              %computes chi^2 statistic
Pval=1-chi2cdf(x2,1);                                                       %computes p-value
Final=[Final x2 Pval];                                                      %stores final results
