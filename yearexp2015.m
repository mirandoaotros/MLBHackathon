%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\cristian\Dropbox\Code\Matlab\mlbh\NLPitchers\2015\488768.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/12/27 19:59:51

cd C:\Users\cristian\Dropbox\Code\Matlab\mlbh\
clc
clear

%% Initialize variables.
filename = 'C:\Users\cristian\Dropbox\Code\Matlab\mlbh\2013.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column33: text (%s)
%	column37: double (%f)
%   column38: double (%f)
%	column39: double (%f)
%   column40: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%s%*s%*s%*s%f%f%f%f%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
ppitchType = dataArray{:, 1};
px = dataArray{:, 2};
pz = dataArray{:, 3};
szt = dataArray{:, 4};
szb = dataArray{:, 5};

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Adjust dataset
out = find(~cellfun('isempty',strfind(ppitchType,'PO')));
todrop = out;
out = find(~cellfun('isempty',strfind(ppitchType,'IN')));
todrop = [todrop;out];
out = find(~cellfun('isempty',strfind(ppitchType,'AB')));
todrop = [todrop;out];
out = find(~cellfun('isempty',strfind(ppitchType,'AS')));
todrop = [todrop;out];
out = find(~cellfun('isempty',strfind(ppitchType,'UN')));
todrop = [todrop;out];
todrop = sort(todrop);
todrop = [todrop;0]; 
ppitchTypeF = cell(size(ppitchType,1)-size(todrop,1)+1,1);
pxF=NaN(size(ppitchTypeF,1),1);
pzF=NaN(size(ppitchTypeF,1),1);
szbF=NaN(size(ppitchTypeF,1),1);
sztF=NaN(size(ppitchTypeF,1),1);

j=1;
for i=1:size(ppitchType,1);
    if i == todrop(j,1);
        j=j+1;
    else
        ppitchTypeF(i-j+1,:) = ppitchType(i,:);
        pxF(i-j+1,:) = px(i,:);
        pzF(i-j+1,:) = pz(i,:);
        szbF(i-j+1,:) = szb(i,:);
        sztF(i-j+1,:) = szt(i,:);
    end
end 

%% Clear temporary variables
clearvars i j out todrop ppitchType px pz szb szt

%% Fastball or BreakingBall
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FA')));
fastballlist = out;
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FT')));
fastballlist = [fastballlist;out];
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FF')));
fastballlist = [fastballlist;out];
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FC')));
fastballlist = [fastballlist;out];
out = find(~cellfun('isempty',strfind(ppitchTypeF,'FS')));
fastballlist = [fastballlist;out];
fastballlist = sort(fastballlist);
fastballlist = [fastballlist;0];
ppitchTypeFBoBB = NaN(size(ppitchTypeF,1),1);
j=1;
for i=1:size(ppitchTypeFBoBB,1);
    if i == fastballlist(j,1);
        j=j+1;
        ppitchTypeFBoBB(i,1) = 1;
    else
        ppitchTypeFBoBB(i,1) = 0;
    end
end 

%% Clear temporary variables
clearvars i j out fastballlist ppitchTypeF

%% Strike or Ball
sobF=NaN(size(pxF,1),1);
for i=1:size(sobF,1);
    if pzF(i,1) > szbF(i,1)-eps && pzF(i,1) < sztF(i,1)+eps;
        sobF(i,1)=1;
    else
        sobF(i,1)=0;
    end
end 

%% Expectancy
Fbexp = sum(ppitchTypeFBoBB)/size(ppitchTypeFBoBB,1);
Bbexp = 1-Fbexp;
Sexp = sum(sobF)/size(sobF,1);
Bexp = 1-Sexp;